apply plugin: "c"

def cpus =  file("./cpus").list()
def syntaxes =  file("./syntax").list()

for (cpu in cpus) {
    for (syntax in syntaxes) {
        final componentName = "vasm${cpu}_${syntax}"
        model {
            platforms {
                x86 {
                    architecture "x86"
                }
                x86_64 {
                    architecture "x86_64"
                }
            }
            components {
                "$componentName"(NativeExecutableSpec) {
                    targetPlatform "x86"
                    targetPlatform "x86_64"
                    sources {
                        c {
                            source {
                                srcDirs ".", "./cpus/$cpu", "./syntax/$syntax"
                                include "*.c"
                                exclude "vobjdump.c"
                            }
                            exportedHeaders {
                                srcDirs ".", "./cpus/$cpu", "./syntax/$syntax"
                                include "*.h"
                            }
                        }
                    }
                    binaries.all {
                        cCompiler.define "OUTAOUT"
                        cCompiler.define "OUTBIN"
                        cCompiler.define "OUTELF"
                        cCompiler.define "OUTHUNK"
                        cCompiler.define "OUTSREC"
                        cCompiler.define "OUTTOS"
                        cCompiler.define "OUTVOBJ"
                        cCompiler.define "OUTXFIL"
                        if (toolChain in Gcc) {
                            cCompiler.define "UNIX"
                            cCompiler.args "-O2"
                        } else if (toolChain in VisualCpp) {
                            cCompiler.args "/nologo", "/O2", "/MT", "/Zp1", "/c", "/wd4996" 
                            linker.args "/NOLOGO"
                        }
                    }
                }
            }
        }
    }
}

